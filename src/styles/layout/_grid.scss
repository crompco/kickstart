// External
@import "~bourbon-neat/core/_neat";
// Internal
@import "../mixins/_grid";
@import "../variables/_grid";
@import "../functions/_utils";

@each $name, $map in $breakpoint-list {
    @include breakpoint($map) {
        @for $i from 1 through map-get($map, columns) {
            $columns: map-get($map, columns);

            @if calc($i / $columns) == 0.5 {
                .#{$name}-#{$i}, .#{$name}-half {
                    @include grid-column($i, $map);
                }
            } @else if calc($i / $columns) == 0.25 {
                .#{$name}-#{$i}, .#{$name}-quarter {
                    @include grid-column($i, $map);
                }
            } @else if calc($i / $columns) == 1 {
                .#{$name}-#{$i}, .#{$name}-full {
                    @include grid-column($i, $map);
                }
            } @else {
                .#{$name}-#{$i} {
                    @include grid-column($i, $map);
                }
            }
        }
    }


    @include breakpoint($map) {
        @for $i from 1 through map-get($map, columns) {
            .#{$name}-push-#{$i} {
                @include grid-push($i, $map);
            }
        }
    }

    .#{$name}-collapse {
        @include grid-collapse($map);
    }
}

// no gutter
.no-gutter {
    @each $name, $map in $breakpoint-list {
        $map: map-merge($map, (gutter: 0px));
        @include breakpoint($map) {
            @for $i from 1 through map-get($map, columns) {
                $columns: map-get($map, columns);

                @if calc($i / $columns) == 0.5 {
                    .#{$name}-#{$i}, .#{$name}-half {
                        @include grid-column($i, $map);
                    }
                } @else if calc($i / $columns) == 0.25 {
                    .#{$name}-#{$i}, .#{$name}-quarter {
                        @include grid-column($i, $map);
                    }
                } @else if calc($i / $columns) == 1 {
                    .#{$name}-#{$i}, .#{$name}-full {
                        @include grid-column($i, $map);
                    }
                } @else {
                    .#{$name}-#{$i} {
                        @include grid-column($i, $map);
                    }
                }
            }
        }


        @include breakpoint($map) {
            @for $i from 1 through map-get($map, columns) {
                .#{$name}-push-#{$i} {
                    @include grid-push($i, $map);
                }
            }
        }
    }
}


@for $i from 1 through length($breakpoint-list) {
    $keys: map-keys($breakpoint-list);
    $name: nth($keys, $i);
    $map: map-get($breakpoint-list, $name);

    // Hide breakpoints
    @if $i == 1 {
        // If we hit a map with a null media, pick the next map.
        @if map-get($map, 'media') == null {
            $map: map-get($breakpoint-list, nth($keys, $i + 1));
        }

        @include breakpoint($map, true) {
            .#{$name}-hide {
                display: none;
            }
        }
    } @else if $i == length($breakpoint-list) {
        @include breakpoint($map) {
            .#{$name}-hide {
                display: none;
            }
        }
    } @else {
        $max-map: map-get($breakpoint-list, nth($keys, $i + 1));
        $min-max-grid: map-merge($map, (media: quote('(min-width:' + map-get($map, media) + ') and (max-width:' + map-get($max-map, media) + ')')));
        @include breakpoint($min-max-grid) {
            .#{$name}-hide {
                display: none;
            }
        }
        @include breakpoint($map) {
            .#{$name}-hide-up {
                display: none;
            }
        }
        @include breakpoint($max-map, true) {
            .#{$name}-hide-down {
                display: none;
            }
        }
    }

    // Show breakpoints
    @if $i == 1 {
        @if map-get($map, 'media') == null {
            $map: map-get($breakpoint-list, nth($keys, $i + 1));
        }

        @include breakpoint($map) {
            .#{$name}-show {
                display: none;
            }
        }
    } @else if $i == length($breakpoint-list) {
        @include breakpoint($map, true) {
            .#{$name}-show {
                display: none;
            }
        }
    } @else {
        $max-map: map-get($breakpoint-list, nth($keys, $i + 1));
        $min-max-grid: map-merge($map, (media: quote('(max-width:' + map-get($map, media) + '), (min-width:' + map-get($max-map, media) + ')')));
        @include breakpoint($min-max-grid) {
            .#{$name}-show {
                display: none;
            }
        }
    }
}

.row-collapse {
    @include grid-collapse($grid-sm);
}

.container {
    @include grid-container;
    max-width: $container-width;
    margin: auto;
    &:before {
        content: " ";
        display: table;
    }
    &:after {
        display: table;
    }
}

.row {
    @include grid-container;
}

.full-height {
    height: 100%;
}

.col {
    margin-bottom: rem($grid-margin-bottom);
}
@import "../mixins/_forms";
@import "../functions/_utils";
@import "../mixins/_state";
@import "../mixins/_autocomplete";
@import "../variables/_autocomplete";

.autocomplete-holder {
	position: relative;
	display: inline-block;
	margin-right: rem($ac-margin-right);
	margin-left: rem($ac-margin-left);
	@extend %form-input;
	background: $ac-bg;
	padding: 0;
	border: 0;

	> input:not(.is-multiple) {
		@include ks-autocomplete-input;
	}

	> input.is-multiple {
		border: 0;
		outline: none;
	}

	&:not(.is-multiple).is-selected {
		.selection {
			@include ks-autocomplete-input;
		}
	}

	&:not(.is-multiple) {
		.selection {
			display: block;
			width: 100%;
			padding: rem($ac-selection-padding);
		}
	}

	.selection {

		.selection-text {
			background-color: $ac-selection-bg;
			display: inline-block;
			color: $ac-selection-color;

			a {
				height: rem($ac-clear-height);
				width: rem($ac-clear-width);
				position: relative;
				display: inline-block;

				&:hover {
					svg g {
						fill: $ac-clear-color;
					}
				}
			}

			svg {
				height: rem($ac-clear-height);
				width: rem($ac-clear-width);
				position: absolute;
				top: 1px;

				g {
					fill: $ac-clear-color-hover;
				}
			}
		}
	}


	&.is-multiple {
		@include ks-autocomplete-input;
		padding: calc(#{rem($ac-input-multi-padding)} - #{$ac-multi-margin}) rem($ac-input-multi-padding);

		&:not(.is-selected) {
			// 1px is for border
			padding: calc(#{rem($ac-input-padding)} - 1px);
		}

		.autocomplete-list {
			// 2px is for border
			// -1px is to move over to compensate for parent borders
			// margin-top is for when there is a selection. padding of the wrapper changes when there are selections
			width: calc(100% + 2px);
			left: -1px;
			margin-top: rem($ac-input-padding);
		}

		&.is-selected .autocomplete-list {
			// Set margin top 2px for border width
			margin-top: 2px;
		}

		.selection .selection-text {
			background-color: $ac-multi-bg;
			margin: $ac-multi-margin;
			padding: $ac-multi-padding;
			border-radius: $ac-multi-border-radius;
			color: $ac-multi-color;

			a:hover {
				svg g {
					fill: $ac-multi-close-color;
				}
			}

			svg g {
				fill: $ac-multi-close-color-hover;
			}
		}
	}
}


.autocomplete-list {
	margin: 0;
	z-index: 100;
	padding: 0;
	width: 100%;
	background-color: $ac-list-bg;
	position: absolute;
	list-style: none;
	border: solid 1px $ac-list-border;
	border-top: 0;
	overflow-y: auto;
	left: 0;

	> li {
		padding: rem($ac-list-item-padding);
		border: 1px solid transparent;
		border-bottom-color: $ac-list-item-border;

		&:last-child {
			border: 0;
		}

		&.selected-item {
			@include state-hover();
			color: $ac-list-selected-color;
		}

		&:hover {
			//@include state-hover();
			//background: $ac-list-item-hover-bg;
		}
	}
}

@import "../mixins/_forms";
@import "../functions/_utils";
@import "../mixins/_state";
@import "../mixins/_autocomplete";
@import "../variables/_autocomplete";
@import "../variables/_forms";

.ks-autocomplete-holder {
    position: relative;
    display: inline-block;
    margin-right: rem($ac-margin-right);
    margin-left: rem($ac-margin-left);
    margin-bottom: rem($form-block-margin-bottom);
    @include form-input(false);
    background: $ac-bg;
    padding: 0;
    border: 0;
    width: calc(100% - (#{rem($ac-margin-right)} + #{rem($ac-margin-left)}));
    &:not(.ks-multiple) > input {
        @include ks-autocomplete-input;
        margin-bottom: 0;
    }
    &.ks-multiple > input {
        border: 0;
        outline: none;
        display: inline-block;
        margin-top: 0;
        margin-bottom: 0;
        box-shadow: none;
        max-width: 100%;
        width: auto;
        padding: 1px 0;
    }
    > input::-ms-clear {
        display: none;
    }
    .ks-searching-results {
        position: absolute;
        width: 100%;
        left: 0;
        padding: 0;
        margin: 0;
        border: 0;
        height: 4px;
    }
    &:not(.ks-multiple).ks-selected {
        .ks-selection {
            @include ks-autocomplete-input;
        }
    }
    &:not(.ks-multiple) {
        .ks-selection {
            display: block;
            width: 100%;
            padding: rem($ac-selection-padding);
        }
    }
    .ks-selection {
        .ks-selection-text {
            background-color: $ac-selection-bg;
            display: inline-block;
            color: $ac-selection-color;
            a {
                height: rem($ac-clear-height);
                width: rem($ac-clear-width);
                position: relative;
                display: inline-block;
                &:hover {
                    svg g {
                        fill: $ac-clear-color;
                    }
                }
            }
            svg {
                height: rem($ac-clear-height);
                width: rem($ac-clear-width);
                position: absolute;
                top: 1px;
                g {
                    fill: $ac-clear-color-hover;
                }
            }
        }
    }
    &.ks-multiple {
        @include ks-autocomplete-input;
        padding: calc(#{rem($ac-input-multi-padding)} - #{$ac-multi-margin}) rem($ac-input-multi-padding);
        width: calc(100% - (#{rem($ac-margin-right)} + #{rem($ac-margin-left)}));
        &:not(.ks-selected) {
            // 1px is for border
            padding: calc(#{rem($ac-input-padding)} - 1px);
        }
        .ks-autocomplete-list {
            // 2px is for border
            // -1px is to move over to compensate for parent borders
            // margin-top is for when there is a selection. padding of the wrapper changes when there are selections
            width: calc(100% + 2px);
            left: -1px;
            margin-top: rem($ac-input-padding);
        }
        &.ks-selected .ks-autocomplete-list {
            // Set margin top 2px for border width
            margin-top: 2px;
        }
        .ks-selection .ks-selection-text {
            background-color: $ac-multi-bg;
            margin: $ac-multi-margin;
            padding: $ac-multi-padding;
            border-radius: $ac-multi-border-radius;
            color: $ac-multi-color;
            a:hover {
                svg g {
                    fill: $ac-multi-close-color;
                }
            }
            svg g {
                fill: $ac-multi-close-color-hover;
            }
            &:focus {
                box-shadow: $ac-multi-selection-focus-box-shadow;
                background-color: lighten($ac-multi-bg, 15%);
            }
        }
    }
}

.ks-autocomplete-list {
    margin: 0;
    margin-bottom: 0.5rem;
    z-index: 100;
    padding: 0;
    width: 100%;
    background-color: $ac-list-bg;
    position: absolute;
    list-style: none;
    border: solid 1px $ac-list-border;
    &.inverted {
        border-bottom: 0;
    }
    &:not(.inverted) {
        border-top: 0;
    }
    overflow-y: auto;
    left: 0;
    transition: top 0.3s;
    li {
        padding: rem($ac-list-item-padding);
        border: 1px solid transparent;
        border-bottom-color: $ac-list-item-border;
        // If its the last child or an option group then we disable the border
        &:last-child,
        &.ks-opt-group {
            border-bottom-color: transparent;
        }
        &.ks-opt-group {
            padding-bottom: 0;
            strong {
                display: block;
                padding: 0.15rem;
            }
            &:first-child strong {
                padding-top: 0;
            }
        }
        &.ks-selected-item {
            @include state-hover();
            color: $ac-list-selected-color;
        }
        &:hover {
            //@include state-hover();
            //background: $ac-list-item-hover-bg;
        }

        &.ks-empty-list-message {
            color: $ac-empty-message-color;
            font-style: $ac-empty-message-style;
        }

        // Handle nested lists
        ul {
            list-style: none;
            padding: 0;
            li {
                padding-left: 1rem;
            }
        }
    }
}
